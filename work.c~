#include <stdio.h>
#include <stdlib.h>
#include 'work.h'
#include <string.h>
#include <unistd.h>
#define SIZE 100;

int getChmod ( const char * path ) {
    /*nous permet de récupérer les autorisations associées à un fichier */
 struct stat ret ;

 if ( stat ( path , & ret ) == -1) {
 return -1;
 }

 return ( ret . st_mode & S_IRUSR ) |( ret . st_mode & S_IWUSR ) |( ret . st_mode & S_IXUSR ) |/*
owner*/
 ( ret . st_mode & S_IRGRP ) |( ret . st_mode & S_IWGRP ) |( ret . st_mode & S_IXGRP ) |/*
group*/
 ( ret . st_mode & S_IROTH ) |( ret . st_mode & S_IWOTH ) |( ret . st_mode & S_IXOTH ) ;/*
other*/
}


void setMode ( int mode , char * path ) {
    /*permet de modifier les autorisations  */
 char buff [100];
 sprintf ( buff , ”chmod %d %s ” , mode , path ) ;
 system ( buff ) ;
}


WorkFile* createWorkFile(char* name){
    WorkFile* w=(WorkFile*)malloc(sizeof(WorkFile));
    w->name=strdup(name);
    w->hash=NULL;
    w->mode=0;
    return w;
}

char* wfts(WorkFile* wf){
    char res[100]=malloc(100*sizeof(char));
    sprintf(res, "%s\t%s\t%d",wf->name, wf->hash, wf->mode)
    return res;
}

WorkFile* stwf(char* ch){
    WorkFile* w=(WorkFile*)malloc(sizeof(WorkFile));
    char name[100];
    char hash[100];
    sscansf(ch,"%s\t%s\t%d",name,hash,w->mode);
    w->name=strdup(name);
    w->hash=strdup(hash);
    return w;
}

WorkTree* initWorkTree(){
    WorkTree* w=(WorkTree*)malloc(sizeof(WorkTree));
    w->tab=NULL;
    w->size=SIZE;
    w->n=0;
}

int inWorkTree(WorkTree* wt,char* name){
    for (int i=0;i<wt->n;i++){
        if (strcmp((wt->tab[i])->name,name)==0){
            return i;
        }
    }
    return -1;
}

int appendWorkTree(WorkTree* wt,char* name,char* hash,int mode){
    WorkFile* new=createWorkFile(name);
    new->hash=hash;
    new->mode=mode;
    int res=inWorkTree(wt,name);
    if(res!=-1){
        if(wt->n<wt->size){
            wt->tab[n]=new;
            wt->n+=1;
            return 0;
        }
    }
    return -1;
}

char* wtts(WorkTree* wt){
    char* res=(char*)malloc(wt->n*2);
    for(int i=0;i<wt->n;i++){
        strcat(wfts(wt->tab[i]),res);
        strcat("\n",res);
    }
    return res;
}

WorkTree* sttf(char* ch){
    WorkTree* new=initWorkTree();
    while(ch!=NULL){
        char name[100];
        char hash[100];
        char mode[100];
        sscansf(ch,"%s\t%s\t%d\n",name,hash,mode);
        appendWorkTree(new,name,hash,mode);
        ch++;
    }
    return new;
}

int wttf(WorkTree* wt,char* file){ //fclose dans main !!!
    FILE* f=fopen(file,"w");
    char* res=wtts(wt);
    return fprintf(res,f);
}

WorkTree* ftwt(char* file){ //fclose dans main !!!
    FILE *f=fopen(file,"r");
    char res[SIZE*2];
    fscanf(f,"%s",res);
    WorkTree* w=sttf(res);
    return w;
}

char* blobWorkTree(WorkTree* wt){
    static char template [] = "/tmp/myfileXXXXXX";
    char fname [1000];
    strcpy ( fname , template ) ;
    mkstemp ( fname ) ;
    wttf(wt,fname);
}

char* saveWorkTree(WorkTree* wt,char* path){

}

void restoreWorkTree(WorkTree* wt,char* path){

}