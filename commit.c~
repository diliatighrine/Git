#include "commit.h"
#include <string.h>
#include <stdio.h>
#include <stdlib.h>

#define SIZE 200

kvp* createKeyVal(char* key, char* val){
	kvp* new=(kvp*)malloc(sizeof(kvp));
	new->key=strdup(key);
	new->value=strdup(val);
	return new;
}

void freeKeyVal(kvp* kv){
	free(kv->key);
	free(kv->value);
	free(kv);
}

char* kvts(kvp* k){
	char tab[200]=(char *)malloc(300);
	sprintf(tab, "%s : %s",k->key,k->value);
	return tab;
}

kvp* stkv(char* str){
	kvp* kv=(kvp*)malloc(sizeof(kvp));
    char key[100];
    char valeur[100];
    sscansf(kv,"%s : %s",key,valeur);
    kv->key=strdup(key);
    kv->value=strdup(valeur);
    return kv;
}

Commit* initCommit(){
	Commit* c=(Commit*)malloc(sizeof(Commit));
	c->T=NULL;
	c->n=0;
	c->size=SIZE;
	return c;
}

unsigned long hash(unsigned char *str){
	unsigned int hash = 0;
	int c;

	while (c = *str++)
	    hash += c;

	return hash;
}

void commitSet(Commit* c,char* key, char* value){
	if(c->n < c->size){
		kvp* new=createKeyVal(key,value);
		int place=key%(c->size);int memo=place;
		if((c->T[place])==NULL){
			(c->T[place])=new;
			c->n+=1;
		}
		else{
			while((c->T[place])!=NULL){
				place++;
				if(place>c->size){
					place=0;
				}
				if(place==memo){
					return;
				}
			}
			(c->T[place])=new;
			c->n+=1;
		}
	}
	return;
}

Commit* createCommit(char* hash){
	Commit* new=initCommit();
	commitSet(new,"tree",hash);
	return new;
}

char* commitGet(Commit* c, char* key){

	int place=key%(c->size);int memo=place;
	if((c->T[place])->key==key){
		return c->T[place]->value;
	}
	else{
		while((c->T[place])->key!=key){
			place++;
			if(place>c->size){
				place=0;
			}
			if(place==memo){
				return NULL;
			}
		}
		return (c->T[place])->value;
	}
}

char* cts(Commit* c){
	char *res= (char*)malloc(c->size * 200);
	for(int i=0; i < c->size;i++){
		if (c->T[i] !=NULL){
			strcat(kvts(c->T[i]),res);
			strcat("\n",res);
		}
	}
	return res;
}

Commit* stc(char* ch){
	Commit* new=initCommit();
	char key[100];
	char valeur[100];
	while(ch !="\0"){
		key[100]="";
		valeur[100]="";
		sscansf(ch,"%s : %s\n",key,valeur);
        commitSet(new,key,valeur);
        ch++;
	}
	return new;
}















